#! /usr/bin/env python

# import the soup
from bs4 import BeautifulSoup
import urllib
import sys

# ====== GLOBALS ====== #

## Data list
# this is a list of lists
# should be of the form:
# [ [name, ammount, date, time], [name, ammount, date, time], ... ]
name = 0
ammount = 1
date = 2
time = 3
data = []

total_raised = 0.0

verbose = 0 # default is false
daily   = 0 # default is false
hourly  = 0 # default is false
total   = 0 # default is false

# ===================== #

# usage print
def usage():
    print "USAGE: at least one command line arg is needed, example: $ ./grapher -t"
    print " | -t | returns the total ammount raised"
    print " | -d | graphs the ammount raised per day"
    print " | -v | verbose print option"

# >>> GRAB ARGS and set to globals
if len(sys.argv) > 4:
    print "too many arguments"
    usage()
    exit()
elif len(sys.argv) == 1:
    print "no arguments detected"
    usage()
    exit()
else:
    for arg in sys.argv:
        if arg == "-v":
            # set verbose
            verbose = 1
        elif arg == "-d":
            # set daily
            daily = 1
        elif arg == "-h":
            hourly = 1
        elif arg == "-t":
            total = 1
        

# <<<


# ====== Graphs ======= #

# daily graph
def dailyGraph( list ):
    prev_date = ""
    val_sum = 0.0
    was_start = 0
    for unit in list:
        if prev_date == unit[date]:
            # same date, sum 
            val_sum += float(unit[ammount])
        else:
            if prev_date == "":
                # print graph outlines here
                print "                                                      DAILY GRAPH"
                print "                                                        ammount"
                print "                  100       200       300       400       500       600       700       800       900       1000"
                print "[{ DATE }]_________|_________|_________|_________|_________|_________|_________|_________|_________|_________|"
                prev_date = unit[date]
                sys.stdout.write(str(unit[date]) + ":")
                val_sum = float(unit[ammount])
                was_start = 1
            else:
                # new data, clear values here
                if was_start:
                    # print previous values here
                    val_total = int(val_sum)/10
                    while val_total > 0:
                        sys.stdout.write("#")
                        val_total -= 1
                    sys.stdout.write(" (" + str(val_sum) +")\n")
                    if (int(prev_date[3:-4]) - int(unit[date][3:-4])) > 1:
                        # generate all the days where no money was gained :'(
                        month = int(prev_date[:2])
                        day_skip = int(prev_date[3:-4]) - 1
                        day_targ = int(unit[date][3:-4])
                        year = int(prev_date[-3:])
                        while day_skip > day_targ:
                            m_char = ''
                            if month < 10:
                                m_char = "0"
                            sys.stdout.write(m_char + str(month) + "/" + str(day_skip) + "/" + str(year) + " : (0.00)\n")
                            day_skip -= 1
                        # add the next day
                        sys.stdout.write(str(unit[date]) + ":")
                    else:
                        sys.stdout.write(str(unit[date]) + ":")
                    prev_date = unit[date]
                    val_sum = float(unit[ammount])
                was_start = 1
                #sys.stdout.write("\n")
    # print the last row
    val_total = int(val_sum)/10
    while val_total > 0:
        sys.stdout.write("#")
        val_total -= 1
    sys.stdout.write(" (" + str(val_sum) +")")
    print " "


# total return
def findTotal(data_list):
    for unit in data_list:
        global total_raised
        total_raised += float(unit[ammount])
    print '\t\t\t\t\t\tTOTAL RAISED: $' + str(total_raised)
    
# ===================== #



# === HTTP GET the raw html === #

if verbose:
    print 'loading html...'
# TODO maybe don't hard code this later
html = urllib.urlopen('https://dar.uga.edu/funder/campaigns/uga-small-satellite-research-laboratory-help-us-go-to-space/').read()
if verbose:
    print 'DONE!'
    print 'making soup...'
soup = BeautifulSoup(html, 'html.parser')
if verbose:
    print 'cleaning soup...'
# get ALL the backer-info divs... mwahaha
for backer_info in soup.find_all("div", class_="backer-info"):
    # gather the data into a temp slot, TODO make this parsing better
    temp = backer_info.get_text().strip()
    for ch in ['\t','\n','u']: # add more chars to replace here
        if ch in temp:
            temp = temp.replace(ch,"")
    # place the backer info in the data list
    unit = [
        temp[:temp.find("$")], # gets name
        temp[temp.find("$")+1:temp.find(".")+3], # gets the amount given
        temp[temp.find(".")+3:temp.find("@")], # gets the date
        temp[temp.find("@")+2:] # gets the time
    ]
    data.append(unit)
if verbose:
    print 'DONE!'

# ============================= #


# ===== DO SOME FUN THINGS ===== #

# ====== PRINT THE DATA ====== #

if total:
    findTotal(data)
if verbose:
    print '========================================================================================================================'
if daily:
    dailyGraph(data)
